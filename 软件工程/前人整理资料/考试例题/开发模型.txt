3. 
（1）瀑布模型
特点：
    (1) 里程碑或基线驱动，
        或者说  文档驱动；
    (2) 过程逆转性很差，
        或者说不可逆转。
适用条件
  （1）在开发时间内需求没有或很少变化。
  （2）分析设计人员对应用领域很熟悉。
  （3）低风险项目（对目标、环境很熟悉）。
  （4）用户使用环境很稳定。
  （5）用户除提出需求以外，很少参与开发。
模型的缺点：
    可维护性差，表现在 
    (1)  由于逆转性很差，所以返工会造成重大损失。
    (2)  由于文档驱动，错误的传递，会采取发散扩大的方式。

（2）增量模型 
 特点：
 (1) 任务或功能模块驱动，可以分阶段提交产品；
 (2) 有多个任务单，这些多个任务单的集合，构成项目的一个总任务书(总用户需求报告)。
适用条件
  （1）在开发过程中，客户接受分阶段交付。
  （2）开发人员对应用领域不熟悉，难以一步到位。
  （3）工期过紧的中等或高风险项目。
  （4）用户可参与到整个软件开发过程中。
  （5）使用面向对象语言或第四代语言。
  （6）软件公司自己有较好的类库、构件库。
  模型的缺点：
  ---若软件系统的组装和拆卸性不强，
  ---或开发人员全局把握水平不高（没有数据库设计专家进行系统集成），
  ---或者客户不同意分阶段提交产品，
  ---或者开发人员过剩，
  都不宜采用这种模型。

（3）
原型模型
  特点：
    原型驱动。因此，开发者必须先有一个原型，至少要有一个原型的核心。
  与迭代模型比较：
    相同点是反复循环几次，直到客户确认为止。不同点是原型模型事先有一个展示性的产品原型，而迭代模型可能没有。
  选择模型的条件：
   （1）已有产品/产品原型，只需客户化的项目。
   （2）简单而熟悉的行业或领域。
   （3）有快速原型开发工具。
   （4）进行产品移植或升级。
    由于上述条件不太苛刻，所以凡是有软件产品的IT企业，在他们熟悉的业务领域内，当客户招标时，他们都会以原型模型作为软件开发模型，去制作投标书，去讲标投标。一旦中标，就对软件产品进行客户化工作，或对软件产品进行二次开发。
  模型的缺点：
    因为事先有一个展示性的产品原型，所以在一定程度上，不利于开发人员的创新。